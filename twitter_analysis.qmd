---
title: "twitter network analysis"
format: html
editor: visual
---

# Twitter Network

```{r}
library(tidyverse)
library(stopwords)
library(purrr)
library(corpus)
library(janitor)
library(caret)

tweets <- read_csv("data/senator_twitter_May-Oct.csv")
```

# Create labeled sample
```{r}
set.seed(2023)
tweets <- tweets %>% 
  sample_n(1500) %>% 
  clean_names() %>% 
  select(x1, text, time, name, party) %>% 
  add_column(for_blm = NA) %>% 
  add_column(against_blm = NA) %>% 

#filters <- c('COVID', 'virus', 'social distanc', 'nurse', 'healthcare', 'hospital', 'health', 'mask', 'testing', 'unemployment', 'schools', 'PPE', 'ballot', 'vote', 'census', 'symptom')

#filtered_sample_tweets <- tweets %>% 
#  filter(!grepl(paste(covid, collapse = "|"), text))

#write.csv(full_sample, "data/sample-labelled.csv")


full_sample <- read_csv("data/sample-labelled.csv")

#create binary topic indicator
sample_tweets$topic_blm <- ifelse(sample_tweets$for_blm, 1,
               ifelse(sample_tweets$against_blm, 1, 0))

#START HERE: join onto rest of tweets
full_sample <- tweets %>% 
  left_join(sample_tweets, by = "x1") %>%  #get from google sheets
  select(x1, text.x, time.x, name.x, party.x, topic_blm, for_blm.y, against_blm.y) %>% 
  rename(text = text.x, time = time.x, name = name.x, party = party.x, for_blm = for_blm.y, against_blm = against_blm.y)

#divide into training and test sets
train <- sample(1:nrow(full_sample), round(0.7*nrow(full_sample),0), F)

d_train <- sample[train,]
d_test <- sample[-train,]
```

# Define dictionary function
credit https://www.r-bloggers.com/2021/11/detecting-topics-in-mails-tweets-etc-how-to-create-a-text-classification-algorithm-in-r/ 
```{r}
create_dictionary <- function(data){
  corpus <- data$text
  
  #split up words and convert to lowercase
  corpus <- purrr::map(corpus, function(x) str_split(tolower(x),"\\s+") %>% unlist) 
  
  #remove non-letters
  corpus <- purrr::map(corpus, function(x) gsub("[^a-z]","",x))
  
  #remove stop-words ("the", "in", etc.)
  corpus <- purrr::map(corpus, function(x) x[!(x %in% stopwords::stopwords("en"))])
  
  #stem all words (eg sentences -> sentenc)
  corpus <- purrr::map(corpus, function(x) text_tokens(x, stemmer="en") %>% unlist)
  
  #keep only words occurring 20+
  words <- as.data.frame(sort(table(unlist(corpus)), decreasing=T), stringsAsFactors = F)
  words <- words$Var1[which(words$Freq >=20)]
  
  return(words)  
}
```

# Create dictionary
```{r}
dict_train <- create_dictionary(sample_tweets)
```

# Define document-term-matrix function
```{r}
create_dtm <- function(data, dict){
  corpus <- data$text
  
  #Repeat pre-processing from above
  corpus <- purrr::map(corpus, function(x) str_split(tolower(x),"\\s+") %>% unlist) 
  corpus <- purrr::map(corpus, function(x) gsub("[^a-z]","",x))
  corpus <- purrr::map(corpus, function(x) x[!(x %in% stopwords::stopwords("en"))])
  corpus <- purrr::map(corpus, function(x) text_tokens(x, stemmer="en") %>% unlist)
  
  #Keep only words from the dictionary
  corpus <- purrr::map(corpus, function(x) x[x %in% dict])
  
  #Make dtm
  dtm <- as.data.frame(matrix(0L, nrow=nrow(data), ncol=length(dict)))
  names(dtm) <- dict
  
  freq <- purrr::map(corpus, table)
  for (i in 1:nrow(dtm)){
    dtm[i, names(freq[[i]])] <- unname(freq[[i]])
  }
  
  return(dtm)
}
```

# Create DTM
```{r}
dtm_train <- create_dtm(d_train, dict_train)
```

# Define binary classification algorithm
```{r}
train_model <- function(data, dtm, target_topic){
 t <- factor(unlist(data[,target_topic]), levels=c(1,0))
 
 caret::train(dtm, t, method="xgbTree",
                     trControl = trainControl(method="cv", number=5, 
                                              search = "random", 
                                              verboseIter=T))
}
```

# Run classification
```{r}
set.seed(2023)
mod <- train_model(d_train, dtm_train, "topic_blm")
mod
```

# Define evaluation function
```{r}
evaluate_model <- function(model, data_test, dict, target_topic){
  t <- factor(unlist(data_test[,target_topic]), levels=c(1,0))
  dtm_test <- create_dtm(data_test, dict)
  
  predictions <- predict(mod, newdata = dtm_test)
  confusionMatrix(predictions, t)
  
}

evaluate_model(mod, d_test, dict_train, "topic_blm")
```



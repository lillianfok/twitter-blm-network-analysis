---
title: "state network regression"
format: html
editor: visual
---

## State Network Regression

```{r}
library(tidyverse)
library(igraph)
library(janitor)
detach(package:statnet,unload=TRUE)

bill_edge_list <- read_csv("data/edge-list.csv")
tweets_df <- read_csv("data/full-labelled-tweets.csv")
states_edge_list <- read_csv("raw-data/state-traits-edgelist.csv")
```

Wrangle data
```{r}
#summarize tweets by governor
governor_tweets_df <- tweets_df %>% 
  select(name, state, 
         pro_blm_ratio, topic_blm_ratio) %>% 
  distinct() 

#5 states out of 50 not represented in twitter data
missing_states <- c("AR", "MS", "NV", "NY", "WV")

#select variables from state df
states_edge_list <- states_edge_list %>% 
  select(state_01, state_02, contig, dif_mrp_ideology, dif_urban_index, 
         dif_White, dif_Black, 
         dif_med_inc,
         dif_population,
         sim_score)

#select variables from state bills 
bill_edge_list <- bill_edge_list %>% 
  select(state, "state-j", score) %>% 
  filter(!(state %in% missing_states)) %>% 
  filter(!('state-j' %in% missing_states))
  
```

Merge into full edge list
```{r}
#merge gov tweets with state i 
merged_edge_list <- bill_edge_list %>% 
  left_join(governor_tweets_df, by = "state")  

#merge tweets with state j
merged_edge_list <- merged_edge_list %>% 
  left_join(governor_tweets_df, by = c("state-j" = "state"))
  
#merge with state traits
full_edge_list <- merged_edge_list %>% 
  left_join(states_edge_list, by = c("state" = "state_01", "state-j" = "state_02")) %>% 
  clean_names() %>% 
  filter(!is.na(name_y)) %>% 
  filter(!is.na(name_x)) %>% 
  mutate(dif_ratio = (topic_blm_ratio_x - topic_blm_ratio_y)*100) %>% 
  mutate(dif_ratio = ifelse(dif_ratio < 0.1, 0.1, dif_ratio))

#

states <- full_edge_list %>% 
  select(state) %>% 
  distinct() 

```

Create igraph network
```{r}
igraph <- graph.data.frame(full_edge_list, directed = FALSE, vertices = states)

#plot(igraph, vertex.label = V(igraph)$state)

#DV
similarity <- as_adjacency_matrix(igraph, attr="score")
similarity <- as.matrix(similarity)

#IVs
twitter <- as_adjacency_matrix(igraph, attr="dif_ratio")
twitter <- as.matrix(twitter)
contiguity <- as_adjacency_matrix(igraph, attr="contig")
contiguity <- as.matrix(contiguity)
ideology <- as_adjacency_matrix(igraph, attr="dif_mrp_ideology")
ideology <- as.matrix(ideology)
white <- as_adjacency_matrix(igraph, attr="dif_white")
white <- as.matrix(white)
black <- as_adjacency_matrix(igraph, attr="dif_black")
black <- as.matrix(black)
urban <- as.matrix(as_adjacency_matrix(igraph, attr = "dif_urban_index"))

state_matrices <- array(NA, c(6, length(contiguity[1,]),length(contiguity[1,]))) 

state_matrices[1,,] <- contiguity
state_matrices[2,,] <- ideology
state_matrices[3,,] <- white
state_matrices[4,,] <- black
state_matrices[5,,] <- twitter
state_matrices[6,,] <- urban


#Run regression using just similarity score

#IV state similarity score
sim_score <- as.matrix(as_adjacency_matrix(igraph, attr = "sim_score"))
only_sim_matrices <- array(NA, c(2, length(sim_score[1,]),length(sim_score[1,])))
only_sim_matrices[1,,] <- sim_score
only_sim_matrices[2,,] <- similarity
```

Run regression
```{r}
library(statnet)
detach(package:igraph,unload=TRUE)

state_sim_lm<-netlm(similarity, state_matrices, reps=100)

state_model <- list()
state_model <- summary(state_sim_lm)
state_model$names <- c("Intercept", "Contiguity", "Ideology", "White", "Black", "Twitter", "Urban")

state_model$coefficients = round(state_model$coefficients, 2)
state_model


only_sim_lm <- netlm(similarity, only_sim_matrices, reps=100)
sim_model <- list()
sim_model <- summary(only_sim_lm)
sim_model$names <- c("Intercept", "Perceived State Similarity", "Twitter")

sim_model$coefficients = round(sim_model$coefficients, 2)
sim_model

#nl<-netlm(similarity,           # Dependent variable/network
#         list(contiguity, ideology, white, black), # List the independent variables/networks
#          reps=1000) 
```

Run regression using just similarity score
```{r}
#IV state similarity score
sim_score <- as.matrix(as_adjacency_matrix())
```

